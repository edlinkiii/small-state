function _classPrivateFieldInitSpec(e,t,i){_checkPrivateRedeclaration(e,t),t.set(e,i)}function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function _classPrivateFieldSet(e,t,i){return _classApplyDescriptorSet(e,_classExtractFieldDescriptor(e,t,"set"),i),i}function _classStaticPrivateFieldSpecSet(e,t,i,s){return _classCheckPrivateStaticAccess(e,t),_classCheckPrivateStaticFieldDescriptor(i,"set"),_classApplyDescriptorSet(e,i,s),s}function _classApplyDescriptorSet(e,t,i){if(t.set)t.set.call(e,i);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=i}}function _classStaticPrivateFieldSpecGet(e,t,i){return _classCheckPrivateStaticAccess(e,t),_classCheckPrivateStaticFieldDescriptor(i,"get"),_classApplyDescriptorGet(e,i)}function _classCheckPrivateStaticFieldDescriptor(e,t){if(void 0===e)throw new TypeError("attempted to "+t+" private static field before its declaration")}function _classCheckPrivateStaticAccess(e,t){if(e!==t)throw new TypeError("Private static access of wrong provenance")}function _classPrivateFieldGet(e,t){return _classApplyDescriptorGet(e,_classExtractFieldDescriptor(e,t,"get"))}function _classExtractFieldDescriptor(e,t,i){if(!t.has(e))throw new TypeError("attempted to "+i+" private field on non-instance");return t.get(e)}function _classApplyDescriptorGet(e,t){return t.get?t.get.call(e):t.value}var _state=new WeakMap,_initial=new WeakMap,_locked=new WeakMap,_subscriptions=new WeakMap,_check=new WeakMap,_error=new WeakMap;export class SmallState{constructor(){if(_classPrivateFieldInitSpec(this,_state,{writable:!0,value:{}}),_classPrivateFieldInitSpec(this,_initial,{writable:!0,value:{}}),_classPrivateFieldInitSpec(this,_locked,{writable:!0,value:[]}),_classPrivateFieldInitSpec(this,_subscriptions,{writable:!0,value:{}}),_classPrivateFieldInitSpec(this,_check,{writable:!0,value:{isString:e=>"string"==typeof e,isArray:e=>Array.isArray(e),isFunction:e=>"function"==typeof e,propertyExists:e=>Object.hasOwn(_classPrivateFieldGet(this,_state),e),propertyIsLocked:e=>_classPrivateFieldGet(this,_locked).includes(e)}}),_classPrivateFieldInitSpec(this,_error,{writable:!0,value:{propertyAlredyExists:e=>`Specified state property [${e}] already exists.`,propertyDoesNotExist:e=>`Specified state property [${e}] does not exist.`,propertyIsLocked:e=>`Specified state property [${e}] is not alterable.`,functionIsRequired:e=>`A function is required to add a subscriber for property (${e})`}}),_classStaticPrivateFieldSpecGet(SmallState,SmallState,_instance))return _classStaticPrivateFieldSpecGet(SmallState,SmallState,_instance);_classStaticPrivateFieldSpecSet(SmallState,SmallState,_instance,this)}add(e,t=null,i=!1){if(_classPrivateFieldGet(this,_check).propertyExists(e))throw new Error(_classPrivateFieldGet(this,_error).propertyAlredyExists(e));return _classPrivateFieldGet(this,_initial)[e]=t,_classPrivateFieldGet(this,_state)[e]=void 0,_classPrivateFieldGet(this,_subscriptions)[e]=[],this.reset(e),i&&this.lock(e),this}get(e){if(!_classPrivateFieldGet(this,_check).propertyExists(e))throw new Error(_classPrivateFieldGet(this,_error).propertyDoesNotExist(e));return _classPrivateFieldGet(this,_state)[e]}set(e,t){if(!_classPrivateFieldGet(this,_check).propertyExists(e))throw new Error(_classPrivateFieldGet(this,_error).propertyDoesNotExist(e));if(_classPrivateFieldGet(this,_check).propertyIsLocked(e))throw new Error(_classPrivateFieldGet(this,_error).propertyIsLocked(e));return _classPrivateFieldGet(this,_state)[e]=t,this.emit(e),this}reset(e){if(!_classPrivateFieldGet(this,_check).propertyExists(e))throw new Error(_classPrivateFieldGet(this,_error).propertyDoesNotExist(e));if(_classPrivateFieldGet(this,_check).propertyIsLocked(e))throw new Error(_classPrivateFieldGet(this,_error).propertyIsLocked(e));return this.set(e,_classPrivateFieldGet(this,_initial)[e])}remove(e){if(!_classPrivateFieldGet(this,_check).propertyExists(e))throw new Error(_classPrivateFieldGet(this,_error).propertyDoesNotExist(e));if(_classPrivateFieldGet(this,_check).propertyIsLocked(e))throw new Error(_classPrivateFieldGet(this,_error).propertyIsLocked(e));return delete _classPrivateFieldGet(this,_state)[e],delete _classPrivateFieldGet(this,_initial)[e],delete _classPrivateFieldGet(this,_subscriptions)[e],this}lock(e){_classPrivateFieldSet(this,_locked,[...new Set([..._classPrivateFieldGet(this,_locked),e])])}unlock(e){_classPrivateFieldSet(this,_locked,_classPrivateFieldGet(this,_locked).filter((t=>t!==e)))}subscribe(e,t=null){if(_classPrivateFieldGet(this,_check).isString(e)&&!_classPrivateFieldGet(this,_check).propertyExists(e))throw new Error(_classPrivateFieldGet(this,_error).propertyDoesNotExist(e));if(!_classPrivateFieldGet(this,_check).isFunction(t))throw new Error(_classPrivateFieldGet(this,_error).functionIsRequired(e));const i=_classPrivateFieldGet(this,_subscriptions)[e];_classPrivateFieldGet(this,_check).isArray(e)?e.forEach((e=>this.subscribe(e,t))):i.push(t)}unsubscribe(e,t=null){let i=_classPrivateFieldGet(this,_subscriptions)[e];_classPrivateFieldGet(this,_check).isArray(e)?e.forEach((e=>this.unsubscribe(e,t))):i=null===t?[]:i.filter((e=>e!==t)),_classPrivateFieldGet(this,_subscriptions)[e]=i}emit(e){const t=_classPrivateFieldGet(this,_subscriptions)[e];if(null==t||!t.length)return;const i=this.get(e);t.forEach((e=>e(i)))}}var _instance={writable:!0,value:void 0};